{"/home/travis/build/npmtest/node-npmtest-packagecheck/test.js":"/* istanbul instrument in package npmtest_packagecheck */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-packagecheck/lib.npmtest_packagecheck.js":"/* istanbul instrument in package npmtest_packagecheck */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_packagecheck = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_packagecheck = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-packagecheck/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-packagecheck && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_packagecheck */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_packagecheck\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_packagecheck.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_packagecheck.rollup.js'] =\n            local.assetsDict['/assets.npmtest_packagecheck.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_packagecheck.__dirname + '/lib.npmtest_packagecheck.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-packagecheck/node_modules/packagecheck/index.js":"#! /usr/bin/env node\n\nvar fs = require('fs');\nvar path = require('path');\nvar sync = require('sync');\nvar selfupdate = require('selfupdate');\nvar packageJSON = require('./package.json');\n\nvar minimistOpts = {\n   boolean: ['u','v','w', 'unconstrained', 'verbose', 'warnings']\n}\n\nvar argv = require('minimist')(process.argv.slice(2), minimistOpts);\n\nVersion = require('./version');\nPackage = require('./package');\nNpm = require('./npm');\n\nfunction help() {\n\n  var help = [\n    \"Usage: packagecheck [-uvw] [--unconstrained] [--verbose] [--warnings] [path] ...\",\n    \"       packagecheck --version\",\n    \"       packagecheck --selfupdate\",\n    \"\",\n    \"Checks to see if package dependencies used by a Meteor package are up-to-date.\",\n    \"\",\n    \"With no arguments, 'packagecheck' will check the current directory, which can \",\n    \"either be a single package, a Meteor 'packages' directory or a Meteor project \",\n    \"directory (in the latter two cases all the individual packages will be checked).\",\n    \"\",\n    \"Alternatively you may pass in paths to either individual packages, \",\n    \"'packages' directories or Meteor project directories.\",\n    \"\",\n    \"The following options are available:\",\n    \"\",\n    \"  -u, --unconstrained   Always warn about use of unconstrained dependencies.\",\n    \"  -v, --verbose         Display output for all dependencies, even if they are up-to-date.\",\n    \"  -w, --warnings        Warn about use of deprecated declarations etc.\",\n    \"\"\n  ].join('\\n');\n\n  console.log(help);\n  process.exit(0);\n}\n\nif (argv.help == true) {\n  help();\n  process.exit(0);\n}\n\n// Flags\n\nunconstrained = (argv.unconstrained || argv.u) ? true : false;\nverbose = (argv.verbose || argv.v) ? true : false;\nwarnings = (argv.warnings || argv.w) ? true : false;\n\nif (argv.selfupdate) {\n\n  // Do a self update if requested\n\n  selfupdate.update(packageJSON, function(error, version) {\n    if (error) throw error;\n    console.log('packagecheck was updated to version: ' + version);\n  });\n}\nelse {\n\n  // We use sync to check for updates, then continue with main function\n\n  sync(function(){\n\n    if (argv.version == true)\n      console.log('PackageCheck ' + packageJSON.version);\n\n    try {\n      var isUpdated = selfupdate.isUpdated.sync(null, packageJSON);\n      if (!isUpdated)\n        console.log(\"There is a new version of packagecheck available. Please run 'packagecheck --selfupdate' to upgrade.\");\n    }\n    catch (e) {}\n\n    if (argv.version == true)\n      process.exit(0);\n\n    // Get the list of folders passed to the command, or just use the current folder otherwise\n\n    var folders = argv._\n    if (folders.length == 0) {\n      folders = [ '.' ];\n    }\n\n    // Check each folder\n\n    folders.forEach(function(folder) {\n\n      var scanPackages = function(absolute) {\n        fs.readdirSync(absolute).filter(function(file) {\n          var potentialPackage = path.join(absolute, file);\n          if (fs.statSync(potentialPackage).isDirectory()) {\n            var packagePath = path.join(potentialPackage, 'package.js');\n            if (fs.existsSync(packagePath)) {\n              // This is a package folder, we just check this package\n              require(packagePath);\n            }\n          }\n        });\n      }\n\n      var absolute = path.resolve(folder);\n      var packagePath = path.join(absolute, 'package.js');\n      var meteorPath = path.join(absolute, '.meteor');\n\n      // We change the processes working directory to the root project directory.\n      // Some plugins expect this (such as meteorhacks:npm), and so does our code.\n\n      cwd = process.cwd()\n      while (!fs.existsSync(path.join(cwd, '.meteor')) && cwd !== \"/\") {\n         cwd = path.resolve(cwd, '..')\n      }\n      process.chdir(cwd);\n\n      if (fs.existsSync(meteorPath)) {\n        // We're in a Meteor project directy - check the packages folder\n        var packagesPath = path.join(absolute, 'packages');\n        if (fs.existsSync(packagesPath) && fs.statSync(packagesPath).isDirectory()) {\n          scanPackages(packagesPath);\n        }\n        else {\n          console.log('No packages folder found in this project.');\n          console.log('');\n          process.exit(1);\n        }\n      }\n      else if (path.basename(absolute) === \"packages\") {\n        scanPackages(absolute);\n      }\n      else if (fs.existsSync(packagePath)) {\n        require(packagePath);\n      }\n      else {\n        console.log('Unable to open ' + packagePath);\n        console.log('');\n        help();\n        process.exit(1);\n      }\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-packagecheck/node_modules/packagecheck/version.js":"var fs = require('fs');\nvar exec = require('sync-exec');\nvar EOL = require('os').EOL;\n\nVersion = {}\n\nVersion.latest = {}\n\n// Get the latest version of a given package\n\nVersion.getLatest = function(packageName) {\n\n  // Check to see if we've cached this result\n\n  if (Version.latest[packageName]) {\n    return Version.latest[packageName];\n  }\n\n  // Rather than reimplement Meteor's entire package database mechanism in order\n  // to get the latest versions, we simply call out to Meteor's command line.\n\n  var result = exec('meteor show ' + packageName);\n\n  if (result.status != 0) {\n    throw(result.stderr);\n  }\n  else {\n    var lines = result.stdout.split(EOL);\n    var idx = 0;\n    var latest = null;\n\n    // Find the list of recent versions\n    while (idx < lines.length && lines[idx++] !== 'Recent versions:') ;\n\n    // Get the last line in this list\n    while (idx < lines.length && lines[idx] !== '') {\n      latest = lines[idx];\n      idx++;\n    }\n\n    // If we have a line, get the version and test\n    if (latest !== null) {\n      latestVersion = latest.split(' ').filter(function(item) { return item != ''; })[0];\n      Version.latest[packageName] = latestVersion;\n      return latestVersion;\n    }\n  }\n}\n\n// Get the version of the given package that's actually used by the project\n\nVersion.getVersionUsed = function(packageName) {\n\n  // Cached the used version info if we haven't already done so\n\n  if (typeof Version.used === 'undefined') {\n\n    Version.used = {};\n\n    var versions = fs.readFileSync(\".meteor/versions\", { encoding: 'utf-8' });\n    var lines = versions.split(EOL);\n\n    lines.forEach(function(line) {\n\n      var splitString = line.split('@');\n      var version = (splitString.length > 1) ? splitString[1] : null;\n      var name = splitString[0];\n\n      if (version)\n        Version.used[name] = version\n\n    });\n  }\n\n  return Version.used[packageName];\n}\n\nmodule.exports = Version;\n","/home/travis/build/npmtest/node-npmtest-packagecheck/node_modules/packagecheck/package.js":"var PackageVersion = require('./package-version-parser');\n\n// Given a package constraint, check if the user has the latest version\n//\n// Returns true if output has been sent to the console\n\nvar checkPackage = function(packageConstraint) {\n\n  var splitString = packageConstraint.split('@');\n  var packageName = splitString[0];\n  var version = (splitString.length > 1) ? splitString[1] : null;\n\n  if (version) {\n\n    // This package has a version constraint\n\n    try {\n      var latestVersion = Version.getLatest(packageName);\n      if (latestVersion) {\n        if (PackageVersion.lessThan(version, latestVersion)) {\n          console.log(packageName + ' version ' + latestVersion + ' is available (' + version + ' currently specified).');\n          return true;\n        } else if (verbose) {\n          console.log(packageName + ' version ' + latestVersion + ' is up to date.');\n          return true;\n        }\n      } else {\n        console.log(packageName + ': version information not found. Run \\'meteor show ' + packageName + '\\' for more information.');\n        return true;\n      }\n    }\n    catch (e) {\n      // If we get an error trying to find a package version then just tell the user.\n      console.log(e);\n      return true;\n    }\n  } else {\n\n    // The package is unconstrained.\n\n    var used = Version.getVersionUsed(packageName);\n\n    try {\n      var latestVersion = Version.getLatest(packageName);\n\n      if (used && latestVersion && latestVersion !== 'local') {\n        if (PackageVersion.lessThan(used, latestVersion)) {\n          console.log(packageName + ' is not constrained. Version ' + latestVersion + ' is available (' + used + ' currently used by the project).');\n          return true;\n        } else if (verbose || unconstrained) {\n          console.log(packageName + ' is not constrained. The latest version (' + latestVersion + ') is being used by the project.');\n          return true;\n        }\n      } else if (verbose || unconstrained) {\n        console.log(packageName + ' does not have version contraint. The version currently used by the project cannot be determined.');\n        return true;\n      }\n    }\n    catch (e) {\n      // If we get an error trying to find a package version then just tell the user.\n      console.log(e);\n      return true;\n    }\n  }\n\n  return false;\n};\n\n// api object to be passed to the Package.onUse function\n\nvar api = {\n\n  // Define empty functions for parts of the API that don't interest us\n\n  versionsFrom: function() {},\n\n  imply: function() {},\n\n  export: function() {},\n\n  addFiles: function() {},\n\n  add_files: function() { if (warnings) console.log('Warning: Package uses deprecated \\'add_files\\' declaration. Use \\'addFiles\\' instead.'); },\n\n  addAssets: function() {},\n\n  mainModule: function() {},\n\n  // The `use` function is called with the list of packages that we need to check\n\n  use: function(packageConstraints) {\n\n    // The user can either pass an array or a string, we need to handle both cases\n\n    var output = false;\n    if (packageConstraints.constructor === Array) {\n      packageConstraints.forEach(function(packageConstraint) {\n        if (checkPackage(packageConstraint))\n          output = true;\n      });\n    } else {\n      if (checkPackage(packageConstraints))\n        output = true;\n    }\n\n    // Insert a blank link between packages if there were updates displayed\n\n    if (output)\n      Package.prevPackageDidOutput = true;\n  },\n\n};\n\n// We need to export our own Package object that will be called by the user's package.js script\n\nvar Package = {\n\n  describe: function(description) {\n\n    // If the previous package output to the console then we need to add a blank line.\n\n    if (Package.prevPackageDidOutput)\n      console.log('');\n\n    console.log('=> Checking package ' + description.name + '...');\n    Package.prevPackageDidOutput = false;\n  },\n\n  onUse: function(fn) {\n    try { fn(api); }\n    catch (e) { console.log(e); }\n  },\n\n  on_use: function(fn) {\n    if (warnings) console.log('Warning: Package uses deprecated \\'on_use\\' declaration. Use \\'onUse\\' instead.');\n    try { fn(api); }\n    catch (e) { console.log(e); }\n  },\n\n  onTest: function(fn) {\n    try { fn(api); }\n    catch (e) { console.log(e); }\n  },\n\n  on_test: function(fn) {\n    if (warnings) console.log('Warning: Package uses deprecated \\'on_test\\' declaration. Use \\'onTest\\' instead.');\n    try { fn(api); }\n    catch (e) { console.log(e); }\n  },\n\n  registerBuildPlugin: function(description) {\n    api.use(description.use);\n  },\n\n};\n\nmodule.exports = Package;\n","/home/travis/build/npmtest/node-npmtest-packagecheck/node_modules/packagecheck/package-version-parser.js":"// This file comes from the Meteor project - only the next 3 lines are changed\n\nvar inTool = true;\nvar semver = require('./semver410');\nvar __ = require('underscore');\n\n// Takes in a meteor version string, for example 1.2.3-rc.5_1+12345.\n//\n// Returns an object composed of the following:\n//  * major (integer >= 0)\n//  * minor (integer >= 0)\n//  * patch (integer >= 0)\n//  * prerelease (Array of Number-or-String, possibly empty)\n//  * wrapNum (integer >= 0)\n//  * build (Array of String, possibly empty)\n//  * raw (String), the raw meteor version string\n//  * version (String), canonical meteor version without build ID\n//  * semver (String), canonical semver version with build ID but no wrap num\n//\n// The input string \"1.2.3-rc.5_1+12345\" has a (major, minor, patch) of\n// (1, 2, 3), a prerelease of [\"rc\", 5], a wrapNum of 1, a build of\n// [\"12345\"], a raw of \"1.2.3-rc.5_1+12345\", a version of\n// \"1.2.3-rc.5_1\", and a semver of \"1.2.3-rc.5+12345\".\n//\n// Throws if the version string is invalid in any way.\n//\n// You can write `PV.parse(\"1.2.3\")` as an alternative to `new PV(\"1.2.3\")`\nvar PV = function (versionString) {\n  if (! (typeof versionString === 'string')) {\n    throw new Error(\"Invalid PackageVersion argument: \" + versionString);\n  }\n  if (! versionString) {\n    throwVersionParserError(\"Empty string is not a valid version\");\n  }\n\n  // The buildID (\"+foo\" suffix) is part of semver, but split it off\n  // because it comes after the wrapNum.  The wrapNum (\"_123\" suffix)\n  // is a Meteor extension to semver.\n  var plusSplit = versionString.split('+');\n  var wrapSplit = plusSplit[0].split('_');\n  var wrapNum = 0;\n\n  if (plusSplit.length > 2) {\n    throwVersionParserError(\"Can't have two + in version: \" + versionString);\n  }\n  if (wrapSplit.length > 2) {\n    throwVersionParserError(\"Can't have two _ in version: \" + versionString);\n  }\n  if (wrapSplit.length > 1) {\n    wrapNum = wrapSplit[1];\n    if (! wrapNum) {\n      throwVersionParserError(\"A wrap number must follow _\");\n    } else if (!/^\\d+$/.test(wrapNum)) {\n      throwVersionParserError(\n        \"The wrap number (after _) must contain only digits, so \" +\n          versionString + \" is invalid.\");\n    } else if (wrapNum[0] === \"0\") {\n      throwVersionParserError(\n        \"The wrap number (after _) must not have a leading zero, so \" +\n          versionString + \" is invalid.\");\n    }\n    wrapNum = parseInt(wrapNum, 10);\n  }\n\n  // semverPart is everything but the wrapNum, so for \"1.0.0_2+xyz\",\n  // it is \"1.0.0+xyz\".\n  var semverPart = wrapSplit[0];\n  if (plusSplit.length > 1) {\n    semverPart += \"+\" + plusSplit[1];\n  }\n\n  // NPM's semver spec supports things like 'v1.0.0' and considers them valid,\n  // but we don't. Everything before the + or - should be of the x.x.x form.\n  if (! /^\\d+\\.\\d+\\.\\d+(\\+|-|$)/.test(semverPart)) {\n    throwVersionParserError(\n      \"Version string must look like semver (eg '1.2.3'), not '\"\n        + versionString + \"'.\");\n  };\n\n  var semverParse = semver.parse(semverPart);\n  if (! semverParse) {\n    throwVersionParserError(\n      \"Version string must look like semver (eg '1.2.3'), not '\"\n        + semverPart + \"'.\");\n  }\n\n  this.major = semverParse.major; // Number\n  this.minor = semverParse.minor; // Number\n  this.patch = semverParse.patch; // Number\n  this.prerelease = semverParse.prerelease; // [OneOf(Number, String)]\n  this.wrapNum = wrapNum; // Number\n  this.build = semverParse.build; // [String]\n  this.raw = versionString; // the entire version string\n  // `.version` is everything but the build ID (\"+foo\"), and it\n  // has been run through semver's canonicalization, ie \"cleaned\"\n  // (for whatever that's worth)\n  this.version = semverParse.version + (wrapNum ? '_' + wrapNum : '');\n  // everything but the wrapnum (\"_123\")\n  this.semver = semverParse.version + (\n    semverParse.build.length ? '+' + semverParse.build.join('.') : '');\n};\n\nPV.parse = function (versionString) {\n  return new PV(versionString);\n};\n\nif (inTool) {\n  module.exports = PV;\n} else {\n  PackageVersion = PV;\n}\n\n// Converts a meteor version into a large floating point number, which\n// is (more or less [*]) unique to that version. Satisfies the\n// following guarantee: If PV.lessThan(v1, v2) then\n// PV.versionMagnitude(v1) < PV.versionMagnitude(v2) [*]\n//\n// [* XXX!] We don't quite satisfy the uniqueness and comparison properties in\n// these cases:\n// 1. If any of the version parts are greater than 100 (pretty unlikely?)\n// 2. If we're dealing with a prerelease version, we only look at the\n//    first two characters of each prerelease part. So, \"1.0.0-beta\" and\n//    \"1.0.0-bear\" will have the same magnitude.\n// 3. If we're dealing with a prerelease version with more than two parts, eg\n//    \"1.0.0-rc.0.1\". In this comparison may fail since we'd get to the limit\n//    of JavaScript floating point precision.\n//\n// If we wanted to fix this, we'd make this function return a BigFloat\n// instead of a vanilla JavaScript number. That will make the\n// constraint solver slower (by how much?), and would require some\n// careful thought.\n// (Or it could just return some sort of tuple, and ensure that\n// the cost functions that consume this can deal with tuples...)\nPV.versionMagnitude = function (versionString) {\n  var v = PV.parse(versionString);\n\n  return v.major * 100 * 100 +\n    v.minor * 100 +\n    v.patch +\n    v.wrapNum / 100 +\n    prereleaseIdentifierToFraction(v.prerelease) / 100 / 100;\n};\n\n// Accepts an array, eg [\"rc\", 2, 3]. Returns a number in the range\n// (-1, 0].  An empty array returns 0. A non-empty string returns a\n// number that is \"as large\" as the its precedence.\nvar prereleaseIdentifierToFraction = function (prerelease) {\n  if (prerelease.length === 0)\n    return 0;\n\n  return __.reduce(prerelease, function (memo, part, index) {\n    var digit;\n    if (typeof part === 'number') {\n      digit = part+1;\n    } else if (typeof part === 'string') {\n      var VALID_CHARACTERS =\n            \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n      var validCharToNumber = function (ch) {\n        var result = VALID_CHARACTERS.indexOf(ch);\n        if (result === -1)\n          throw new Error(\"Unexpected character in prerelease identifier: \" + ch);\n        else\n          return result;\n      };\n\n      digit = 101 + // Numeric parts always have lower precedence than non-numeric parts.\n        validCharToNumber(part[0]) * VALID_CHARACTERS.length +\n        (part[1] ? validCharToNumber(part[1]) : 0);\n    } else {\n      throw new Error(\"Unexpected prerelease identifier part: \" + part + \" of type \" + typeof part);\n    }\n\n    // 4100 > 101 + VALID_CHARACTERS.length *\n    // VALID_CHARACTERS.length. And there's a test to verify this\n    // (\"test the edges of `versionMagnitude`\")\n    return memo + digit / Math.pow(4100, index+1);\n  }, -1);\n};\n\n// Takes in two meteor versions. Returns true if the first one is less than the second.\n// Versions are strings or PackageVersion objects.\nPV.lessThan = function (versionOne, versionTwo) {\n  return PV.compare(versionOne, versionTwo) < 0;\n};\n\n// Given a string version, returns its major version (the first section of the\n// semver), as an integer. Two versions are compatible if they have the same\n// version number.\n//\n// versionString: valid meteor version string.\nPV.majorVersion = function (versionString) {\n  return PV.parse(versionString).major;\n};\n\n// Takes in two meteor versions. Returns 0 if equal, a positive number if v1\n// is greater, a negative number if v2 is greater.\n// Versions are strings or PackageVersion objects.\nPV.compare = function (versionOne, versionTwo) {\n  var v1 = versionOne;\n  if (typeof v1 === 'string') {\n    v1 = PV.parse(v1);\n  }\n  var v2 = versionTwo;\n  if (typeof v2 === 'string') {\n    v2 = PV.parse(v2);\n  }\n\n  // If the semver parts are different, use the semver library to compare,\n  // ignoring wrap numbers.  (The semver library will ignore the build ID\n  // per the semver spec.)\n  if (v1.semver !== v2.semver) {\n    return semver.compare(v1.semver, v2.semver);\n  } else {\n    // If the semver components are equal, then the one with the smaller wrap\n    // numbers is smaller.\n    return v1.wrapNum - v2.wrapNum;\n  }\n};\n\n// Conceptually we have three types of constraints:\n// 1. \"compatible-with\" - A@x.y.z - constraints package A to version x.y.z or\n//    higher, as long as the version is backwards compatible with x.y.z.\n//    \"pick A compatible with x.y.z\"\n//    It is the default type.\n// 2. \"exactly\" - A@=x.y.z - constraints package A only to version x.y.z and\n//    nothing else.\n//    \"pick A exactly at x.y.z\"\n// 3. \"any-reasonable\" - \"A\"\n//    Basically, this means any version of A ... other than ones that have\n//    dashes in the version (ie, are prerelease) ... unless the prerelease\n//    version has been explicitly selected (which at this stage in the game\n//    means they are mentioned in a top-level constraint in the top-level\n//    call to the resolver).\nvar parseSimpleConstraint = function (constraintString) {\n  if (! constraintString) {\n    throw new Error(\"Non-empty string required\");\n  }\n\n  var type, versionString;\n\n  if (constraintString.charAt(0) === '=') {\n    type = \"exactly\";\n    versionString = constraintString.substr(1);\n  } else {\n    type = \"compatible-with\";\n    versionString = constraintString;\n  }\n\n  // This will throw if the version string is invalid.\n  PV.getValidServerVersion(versionString);\n\n  return { type: type, versionString: versionString };\n};\n\n\n// Check to see if the versionString that we pass in is a valid meteor version.\n//\n// Returns a valid meteor version string that can be included in the\n// server. That means that it has everything EXCEPT the build id. Throws if the\n// entered string was invalid.\nPV.getValidServerVersion = function (meteorVersionString) {\n  return PV.parse(meteorVersionString).version;\n};\n\nPV.VersionConstraint = function (vConstraintString) {\n  var alternatives;\n  // If there is no version string (\"\" or null), then our only\n  // constraint is any-reasonable.\n  if (! vConstraintString) {\n    // .versionString === null is relied on in the tool\n    alternatives =\n      [ { type: \"any-reasonable\", versionString: null } ];\n    vConstraintString = \"\";\n  } else {\n    // Parse out the versionString.\n    var parts = vConstraintString.split(/ *\\|\\| */);\n    alternatives = __.map(parts, function (alt) {\n      if (! alt) {\n        throwVersionParserError(\"Invalid constraint string: \" +\n                                vConstraintString);\n      }\n      return parseSimpleConstraint(alt);\n    });\n  }\n\n  this.raw = vConstraintString;\n  this.alternatives = alternatives;\n};\n\nPV.parseVersionConstraint = function (constraintString) {\n  return new PV.VersionConstraint(constraintString);\n};\n\n// A PackageConstraint consists of a package name and a version constraint.\n// Call either with args (package, versionConstraintString) or\n// (packageConstraintString), or (package, versionConstraint).\n// That is, (\"foo\", \"1.2.3\") or (\"foo@1.2.3\"), or (\"foo\", vc) where vc\n// is instanceof PV.VersionConstraint.\nPV.PackageConstraint = function (part1, part2) {\n  if ((typeof part1 !== \"string\") ||\n      (part2 && (typeof part2 !== \"string\") &&\n       ! (part2 instanceof PV.VersionConstraint))) {\n    throw new Error(\"constraintString must be a string\");\n  }\n\n  var packageName, versionConstraint, vConstraintString;\n  if (part2) {\n    packageName = part1;\n    if (part2 instanceof PV.VersionConstraint) {\n      versionConstraint = part2;\n    } else {\n      vConstraintString = part2;\n    }\n  } else if (part1.indexOf(\"@\") >= 0) {\n    // Shave off last part after @, with \"a@b@c\" becoming [\"a@b\", \"c\"].\n    // Validating the package name will catch extra @.\n    var parts = part1.match(/^(.*)@([^@]*)$/).slice(1);\n    packageName = parts[0];\n    vConstraintString = parts[1];\n    if (! vConstraintString) {\n      throwVersionParserError(\n        \"Version constraint for package '\" + packageName +\n          \"' cannot be empty; leave off the @ if you don't want to constrain \" +\n          \"the version.\");\n    }\n  } else {\n    packageName = part1;\n    vConstraintString = \"\";\n  }\n\n  PV.validatePackageName(packageName);\n  if (versionConstraint) {\n    vConstraintString = versionConstraint.raw;\n  } else {\n    versionConstraint = PV.parseVersionConstraint(vConstraintString);\n  }\n\n  this.package = packageName;\n  this.constraintString = vConstraintString;\n  this.versionConstraint = versionConstraint;\n};\n\nPV.PackageConstraint.prototype.toString = function () {\n  var ret = this.package;\n  if (this.constraintString) {\n    ret += \"@\" + this.constraintString;\n  }\n  return ret;\n};\n\n// Structure of a parsed constraint:\n//\n// /*PV.PackageConstraint*/\n// { package: String,\n//   constraintString: String,\n//   versionConstraint: /*PV.VersionConstraint*/ {\n//     raw: String,\n//     alternatives: [{versionString: String|null,\n//                     type: String}]}}\nPV.parsePackageConstraint = function (part1, part2) {\n  return new PV.PackageConstraint(part1, part2);\n};\n\nPV.validatePackageName = function (packageName, options) {\n  options = options || {};\n\n  var badChar = packageName.match(/[^a-z0-9:.\\-]/);\n  if (badChar) {\n    if (options.detailedColonExplanation) {\n      throwVersionParserError(\n        \"Bad character in package name: \" + JSON.stringify(badChar[0]) +\n          \".\\n\\nPackage names can only contain lowercase ASCII alphanumerics, \" +\n          \"dash, or dot.\\nIf you plan to publish a package, it must be \" +\n          \"prefixed with your\\nMeteor Developer Account username and a colon.\");\n    }\n    throwVersionParserError(\n      \"Package names can only contain lowercase ASCII alphanumerics, dash, \" +\n        \"dot, or colon, not \" + JSON.stringify(badChar[0]) + \".\");\n  }\n  if (!/[a-z]/.test(packageName)) {\n    throwVersionParserError(\"Package name must contain a lowercase ASCII letter: \"\n                            + JSON.stringify(packageName));\n  }\n  if (packageName[0] === '.') {\n    throwVersionParserError(\"Package name may not begin with a dot: \"\n                            + JSON.stringify(packageName));\n  }\n  if (packageName.slice(-1) === '.') {\n    throwVersionParserError(\"Package name may not end with a dot: \"\n                            + JSON.stringify(packageName));\n  }\n\n  if (packageName.slice(-1) === '.') {\n    throwVersionParserError(\"Package names may not end with a dot: \" +\n                            JSON.stringify(packageName));\n  }\n  if (packageName.indexOf('..') >= 0) {\n    throwVersionParserError(\"Package names may not contain two consecutive dots: \" +\n                            JSON.stringify(packageName));\n  }\n  if (packageName[0] === '-') {\n    throwVersionParserError(\"Package names may not begin with a hyphen: \" +\n                            JSON.stringify(packageName));\n  }\n  // (There is already a package ending with a `-` and one with two consecutive `-`\n  // in troposphere, though they both look like typos.)\n\n  if (packageName[0] === \":\" || __.last(packageName) === \":\") {\n    throwVersionParserError(\"Package names may not start or end with a colon: \" +\n                            JSON.stringify(packageName));\n  }\n};\n\nvar throwVersionParserError = function (message) {\n  var e = new Error(message);\n  e.versionParserError = true;\n  throw e;\n};\n\n// Return true if the version constraint was invalid prior to 0.9.3\n// (adding _ and || support)\n//\n// NOTE: this is not used on the client yet. This package is used by the\n// package server to determine what is valid.\nPV.invalidFirstFormatConstraint = function (validConstraint) {\n  if (!validConstraint) return false;\n  // We can check this easily right now, because we introduced some new\n  // characters. Anything with those characters is invalid prior to\n  // 0.9.3. XXX: If we ever have to go through these, we should write a more\n  // complicated regex.\n  return (/_/.test(validConstraint) ||\n          /\\|/.test(validConstraint));\n};\n\n// Remove a suffix like \"+foo\" if present.\nPV.removeBuildID = function (versionString) {\n  return versionString.replace(/\\+.*$/, '');\n};\n","/home/travis/build/npmtest/node-npmtest-packagecheck/node_modules/packagecheck/semver410.js":"// This file comes from the Meteor project\n//\n// The only difference is that the the `var exports = SemVer, module = {}, define = {}`\n// line below has been commented out so that this module will be exported under node.js\n\n// <METEOR>\n// Fool the module system detection code below so that it doesn't\n// do anything special.\n// var exports = SemVer, module = {}, define = {};\n// Create a package-private variable.  Can't use SemVer because\n// of the code that says `function SemVer(...)` below (implicitly\n// declaring a var).  Can't use \"semver\" because that's a var in\n// package-version-parser.js.\nSemVer410 = SemVer;\n// </METEOR>\n\n// export the class if we are in a Node-like system.\nif (typeof module === 'object' && module.exports === exports)\n  exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n/* nomin */ var debug;\n/* nomin */ if (typeof process === 'object' &&\n    /* nomin */ process.env &&\n    /* nomin */ process.env.NODE_DEBUG &&\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))\n  /* nomin */ debug = function() {\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);\n    /* nomin */ args.unshift('SEMVER');\n    /* nomin */ console.log.apply(console, args);\n    /* nomin */ };\n/* nomin */ else\n  /* nomin */ debug = function() {};\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i]);\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, loose) {\n  var r = loose ? re[LOOSE] : re[FULL];\n  return (r.test(version)) ? new SemVer(version, loose) : null;\n}\n\nexports.valid = valid;\nfunction valid(version, loose) {\n  var v = parse(version, loose);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, loose) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, loose) {\n  if (version instanceof SemVer) {\n    if (version.loose === loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, loose);\n\n  debug('SemVer', version, loose);\n  this.loose = loose;\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      return (/^[0-9]+$/.test(id)) ? +id : id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.inspect = function() {\n  return '<SemVer \"' + this + '\">';\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  debug('SemVer.compare', this.version, this.loose, other);\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    debug('prerelease compare', i, a, b);\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(b);\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, loose) {\n  if (comp instanceof Comparator) {\n    if (comp.loose === loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, loose);\n\n  debug('comparator', comp, loose);\n  this.loose = loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  debug('comp', this);\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.loose);\n};\n\nComparator.prototype.inspect = function() {\n  return '<SemVer Comparator \"' + this + '\">';\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  debug('Comparator.test', version, this.loose);\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  return cmp(version, this.operator, this.semver, this.loose);\n};\n\n\nexports.Range = Range;\nfunction Range(range, loose) {\n  if ((range instanceof Range) && range.loose === loose)\n    return range;\n\n  if (!(this instanceof Range))\n    return new Range(range, loose);\n\n  this.loose = loose;\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.inspect = function() {\n  return '<SemVer Range \"' + this.range + '\">';\n};\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.loose;\n  range = range.trim();\n  debug('range', range, loose);\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  debug('hyphen replace', range);\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  debug('comparator trim', range, re[COMPARATORTRIM]);\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, loose);\n  }).join(' ').split(/\\s+/);\n  if (this.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, loose);\n  });\n\n  return set;\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, loose) {\n  return new Range(range, loose).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, loose) {\n  debug('comp', comp);\n  comp = replaceCarets(comp, loose);\n  debug('caret', comp);\n  comp = replaceTildes(comp, loose);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, loose);\n  debug('xrange', comp);\n  comp = replaceStars(comp, loose);\n  debug('stars', comp);\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, loose) {\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0- <1.3.0-\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      debug('replaceTilde pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, loose) {\n  debug('caret', comp, loose);\n  var r = loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      debug('no pr');\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, loose) {\n  debug('replaceXRanges', comp, loose);\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, loose) {\n  comp = comp.trim();\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm)\n          M = +M + 1\n        else\n          m = +m + 1\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    debug('xRange return', ret);\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, loose) {\n  debug('replaceStars', comp, loose);\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (version.prerelease.length) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n      if (set[i].semver === ANY)\n        return true;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, loose) {\n  try {\n    range = new Range(range, loose);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, loose) {\n  return versions.filter(function(version) {\n    return satisfies(version, range, loose);\n  }).sort(function(a, b) {\n    return rcompare(a, b, loose);\n  })[0] || null;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, loose) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, loose).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, loose) {\n  return outside(version, range, '<', loose);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, loose) {\n  return outside(version, range, '>', loose);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, loose) {\n  version = new SemVer(version, loose);\n  range = new Range(range, loose);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, loose)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, loose)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, loose)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Use the define() function if we're in AMD land\nif (typeof define === 'function' && define.amd)\n  define(exports);\n","/home/travis/build/npmtest/node-npmtest-packagecheck/node_modules/packagecheck/npm.js":"// package.js file sometimes make use of Npm directives. We define an empty object so\n// that the directives are ignored. If we don't do this then an error will be generated.\n\nvar Npm = {\n\n  depends: function() {},\n  require: require\n}\n\nmodule.exports = Npm;\n"}